{"version":3,"sources":["../../../src/dtos/admin.dto.ts"],"sourcesContent":["import { IsEmail, IsString, IsNotEmpty, MinLength, MaxLength, IsInt, IsOptional, Min, Validate, IsArray } from 'class-validator';\nimport { Match } from './match.decorator';\n\nexport class LoginAdminDto {\n  @IsEmail()\n  @IsNotEmpty()\n  public email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @MaxLength(32)\n  public password: string;\n}\n\n// DTO for updating profile\nexport class UpdateProfileDto {\n  @IsEmail()\n  public email: string;\n\n  @IsString()\n  public name: string;\n}\n\n// DTO for updating password\nexport class UpdatePasswordDto {\n  @IsString()\n  public currentPassword: string;\n\n  @IsString()\n  @MinLength(6, { message: 'Password must be at least 6 characters long' })\n  public newPassword: string;\n}\n\n/**\n * DTO for creating a new admin.\n * Ensures validation rules are applied for fields like email, name, phoneNo, and password.\n */\nexport class CreateAdminDto {\n  @IsEmail()\n  @IsNotEmpty()\n  public email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  public name: string;\n\n  @IsString()\n  @MinLength(6)\n  @IsNotEmpty()\n  public password: string;\n\n  @IsInt()\n  @IsOptional()\n  @Min(0, { message: 'Status must be 0 or 1' })\n  public status?: number;\n\n  @IsArray()\n  @IsNotEmpty({ each: true })\n  public roles?: Array<string>;\n}\n\n/**\n * DTO for updating an existing admin.\n * Allows partial updates by making all fields optional.\n */\nexport class UpdateAdminDto {\n  @IsEmail()\n  @IsOptional()\n  public email?: string;\n\n  @IsString()\n  @IsOptional()\n  public name?: string;\n\n  @IsString()\n  @MinLength(6)\n  @IsOptional()\n  public password?: string;\n\n  @IsInt()\n  @IsOptional()\n  public status?: number;\n\n  @IsArray()\n  @IsNotEmpty({ each: true })\n  public roles?: Array<string>;\n}\n\n/**\n * DTO for updating the password.\n */\nexport class UpdateAdminPasswordDto {\n  @IsString()\n  @IsNotEmpty({ message: 'New password is required' })\n  @MinLength(8, { message: 'Password must be at least 8 characters long' })\n  public newPassword: string;\n\n  @IsString()\n  @IsNotEmpty({ message: 'Confirmation password is required' })\n  @Validate(Match, ['newPassword'], { message: 'Passwords do not match' })\n  public confirmNewPassword: string;\n}\n"],"names":["CreateAdminDto","LoginAdminDto","UpdateAdminDto","UpdateAdminPasswordDto","UpdatePasswordDto","UpdateProfileDto","email","password","name","currentPassword","newPassword","message","status","roles","each","confirmNewPassword"],"mappings":";;;;;;;;;;;IAsCaA,cAAc;eAAdA;;IAnCAC,aAAa;eAAbA;;IA+DAC,cAAc;eAAdA;;IA0BAC,sBAAsB;eAAtBA;;IAnEAC,iBAAiB;eAAjBA;;IATAC,gBAAgB;eAAhBA;;;gCAhBkG;gCACzF;;;;;;;;;;;;;;;;;;;;;;;AAEf,IAAA,AAAMJ,gBAAN,MAAMA;;QACX,uBAEOK,SAFP,KAAA;QAIA,uBAIOC,YAJP,KAAA;;AAKF;;;;;;;;;;;;;AAGO,IAAA,AAAMF,mBAAN,MAAMA;;QACX,uBACOC,SADP,KAAA;QAGA,uBACOE,QADP,KAAA;;AAEF;;;;;;;;;AAGO,IAAA,AAAMJ,oBAAN,MAAMA;;QACX,uBACOK,mBADP,KAAA;QAGA,uBAEOC,eAFP,KAAA;;AAGF;;;;;;;;QAFkBC,SAAS;;;;AAQpB,IAAA,AAAMX,iBAAN,MAAMA;;QACX,uBAEOM,SAFP,KAAA;QAIA,uBAEOE,QAFP,KAAA;QAIA,uBAGOD,YAHP,KAAA;QAKA,uBAGOK,UAHP,KAAA;QAKA,uBAEOC,SAFP,KAAA;;AAGF;;;;;;;;;;;;;;;;;;;;;QANYF,SAAS;;;;;;;QAILG,MAAM;;;;AAQf,IAAA,AAAMZ,iBAAN,MAAMA;;QACX,uBAEOI,SAFP,KAAA;QAIA,uBAEOE,QAFP,KAAA;QAIA,uBAGOD,YAHP,KAAA;QAKA,uBAEOK,UAFP,KAAA;QAIA,uBAEOC,SAFP,KAAA;;AAGF;;;;;;;;;;;;;;;;;;;;;;;;;QAFgBC,MAAM;;;;AAOf,IAAA,AAAMX,yBAAN,MAAMA;;QACX,uBAGOO,eAHP,KAAA;QAKA,uBAGOK,sBAHP,KAAA;;AAIF;;;;QARgBJ,SAAS;;;QACPA,SAAS;;;;;;;QAIXA,SAAS;;;QACL;;QAAkBA,SAAS"}