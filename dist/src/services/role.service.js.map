{"version":3,"sources":["../../../src/services/role.service.ts"],"sourcesContent":["import { Service } from 'typedi';\nimport { HttpException } from '@/exceptions/HttpException';\nimport { Role } from '@prisma/client';\nimport { BaseService } from '@/services/base/base.service';\nimport { EUserType } from '@/interfaces/global.interface';\n\n/**\n * Service class for handling role-related operations.\n * Extends the base service for CRUD functionality specific to the Role model.\n */\n@Service()\nexport class RoleService extends BaseService<Role> {\n  /**\n   * Constructor initializes the base service with the 'Role' model name.\n   */\n  constructor() {\n    super('Role');\n  }\n\n  public query = this.prisma.role;\n  /**\n   * Retrieves all roles from the database.\n   * @returns {Promise<Role[]>} - A promise that resolves to an array of roles.\n   */\n  public async findAll(type?: EUserType): Promise<Role[]> {\n    const whereCondition: any = {};\n    if (type) {\n      whereCondition.type = type;\n    }\n    return this.prisma.role.findMany({\n      where: whereCondition,\n    });\n  }\n\n  /**\n   * Finds a role by its unique ID.\n   * @param {string} roleId - The ID of the role to find.\n   * @returns {Promise<Role>} - A promise that resolves to the found role or throws an exception if not found.\n   * @throws {HttpException} - Throws an exception if the role does not exist.\n   */\n  public async findById(roleId: string): Promise<Role> {\n    const findRole: Role = await this.prisma.role.findUnique({\n      where: { id: roleId },\n    });\n    if (!findRole) throw new HttpException(409, \"Role doesn't exist\");\n\n    return findRole;\n  }\n\n  /**\n   * Creates a new role with the provided data.\n   * @param {Role} data - The role data to create.\n   * @returns {Promise<Role>} - A promise that resolves to the created role.\n   * @throws {HttpException} - Throws an exception if the role name already exists.\n   */\n  public async create(data: Role): Promise<Role> {\n    // Check if the role already exists by name\n    const findRole: Role = await this.prisma.role.findUnique({\n      where: { name: data.name },\n    });\n    if (findRole) throw new HttpException(409, `This role ${data.name} already exists`);\n\n    // Create the new role\n    delete data.id;\n    return this.prisma.role.create({ data });\n  }\n\n  /**\n   * Updates an existing role by its ID with the provided data.\n   * Validates that the role name is unique across roles.\n   * @param {string} roleId - The ID of the role to update.\n   * @param {Role} data - The new data for the role.\n   * @returns {Promise<Role>} - A promise that resolves to the updated role.\n   * @throws {HttpException} - Throws an exception if the role name already exists for a different role.\n   * @throws {HttpException} - Throws an exception if the role with the provided ID is not found.\n   */\n  public async update(roleId: string, data: Role): Promise<Role> {\n    // Find the role by ID to ensure the role exists\n    const findRole: Role | null = await this.prisma.role.findUnique({\n      where: { id: roleId },\n    });\n\n    // Throw an error if unable to find role with roleId\n    if (!findRole) {\n      throw new HttpException(404, `Role with ID ${roleId} not found`);\n    }\n\n    // Check if another role exists with the same name but a different ID\n    if (data.name && data.name.toLowerCase() !== findRole.name.toLowerCase()) {\n      const existingRoleWithName: Role | null = await this.prisma.role.findUnique({\n        where: { name: data.name },\n      });\n\n      // Throw an error if an existing role with the same name is found\n      if (existingRoleWithName) {\n        throw new HttpException(409, `Role name ${data.name} is already in use by another role`);\n      }\n    }\n\n    // Update the role with new data\n    return this.prisma.role.update({\n      where: { id: roleId },\n      data: data,\n    });\n  }\n\n  /**\n   * Deletes roles by their IDs.\n   * @param {string[]} roleIds - An array of role IDs to delete.\n   * @returns {Promise<boolean>} - A promise that resolves to true if roles were successfully deleted.\n   * @throws {HttpException} - Throws an exception if no roles were deleted.\n   */\n  public async delete(roleIds: string[]): Promise<boolean> {\n    // Attempt to delete roles with the provided IDs\n    const result = await this.prisma.role.deleteMany({\n      where: {\n        id: { in: roleIds },\n        isSystem: 0,\n      },\n    });\n\n    // Throw an error if no roles were deleted\n    if (!result.count) throw new HttpException(409, \"Role doesn't exist\");\n\n    return true;\n  }\n}\n"],"names":["RoleService","BaseService","findAll","type","whereCondition","prisma","role","findMany","where","findById","roleId","findRole","findUnique","id","HttpException","create","data","name","update","toLowerCase","existingRoleWithName","delete","roleIds","result","deleteMany","in","isSystem","count","constructor","query"],"mappings":";;;;+BAWaA;;;eAAAA;;;wBAXW;+BACM;6BAEF;;;;;;;;;;;;;;;;;;;;;;;AAQrB,IAAA,AAAMA,cAAN,MAAMA,oBAAoBC,wBAAW;IAa1C,MAAaC,QAAQC,IAAgB,EAAmB;QACtD,MAAMC,iBAAsB,CAAC;QAC7B,IAAID,MAAM;YACRC,eAAeD,IAAI,GAAGA;QACxB;QACA,OAAO,IAAI,CAACE,MAAM,CAACC,IAAI,CAACC,QAAQ,CAAC;YAC/BC,OAAOJ;QACT;IACF;IAQA,MAAaK,SAASC,MAAc,EAAiB;QACnD,MAAMC,WAAiB,MAAM,IAAI,CAACN,MAAM,CAACC,IAAI,CAACM,UAAU,CAAC;YACvDJ,OAAO;gBAAEK,IAAIH;YAAO;QACtB;QACA,IAAI,CAACC,UAAU,MAAM,IAAIG,4BAAa,CAAC,KAAK;QAE5C,OAAOH;IACT;IAQA,MAAaI,OAAOC,IAAU,EAAiB;QAE7C,MAAML,WAAiB,MAAM,IAAI,CAACN,MAAM,CAACC,IAAI,CAACM,UAAU,CAAC;YACvDJ,OAAO;gBAAES,MAAMD,KAAKC,IAAI;YAAC;QAC3B;QACA,IAAIN,UAAU,MAAM,IAAIG,4BAAa,CAAC,KAAK,CAAC,UAAU,EAAEE,KAAKC,IAAI,CAAC,eAAe,CAAC;QAGlF,OAAOD,KAAKH,EAAE;QACd,OAAO,IAAI,CAACR,MAAM,CAACC,IAAI,CAACS,MAAM,CAAC;YAAEC;QAAK;IACxC;IAWA,MAAaE,OAAOR,MAAc,EAAEM,IAAU,EAAiB;QAE7D,MAAML,WAAwB,MAAM,IAAI,CAACN,MAAM,CAACC,IAAI,CAACM,UAAU,CAAC;YAC9DJ,OAAO;gBAAEK,IAAIH;YAAO;QACtB;QAGA,IAAI,CAACC,UAAU;YACb,MAAM,IAAIG,4BAAa,CAAC,KAAK,CAAC,aAAa,EAAEJ,OAAO,UAAU,CAAC;QACjE;QAGA,IAAIM,KAAKC,IAAI,IAAID,KAAKC,IAAI,CAACE,WAAW,OAAOR,SAASM,IAAI,CAACE,WAAW,IAAI;YACxE,MAAMC,uBAAoC,MAAM,IAAI,CAACf,MAAM,CAACC,IAAI,CAACM,UAAU,CAAC;gBAC1EJ,OAAO;oBAAES,MAAMD,KAAKC,IAAI;gBAAC;YAC3B;YAGA,IAAIG,sBAAsB;gBACxB,MAAM,IAAIN,4BAAa,CAAC,KAAK,CAAC,UAAU,EAAEE,KAAKC,IAAI,CAAC,kCAAkC,CAAC;YACzF;QACF;QAGA,OAAO,IAAI,CAACZ,MAAM,CAACC,IAAI,CAACY,MAAM,CAAC;YAC7BV,OAAO;gBAAEK,IAAIH;YAAO;YACpBM,MAAMA;QACR;IACF;IAQA,MAAaK,OAAOC,OAAiB,EAAoB;QAEvD,MAAMC,SAAS,MAAM,IAAI,CAAClB,MAAM,CAACC,IAAI,CAACkB,UAAU,CAAC;YAC/ChB,OAAO;gBACLK,IAAI;oBAAEY,IAAIH;gBAAQ;gBAClBI,UAAU;YACZ;QACF;QAGA,IAAI,CAACH,OAAOI,KAAK,EAAE,MAAM,IAAIb,4BAAa,CAAC,KAAK;QAEhD,OAAO;IACT;IA9GAc,aAAc;QACZ,KAAK,CAAC,SAGR,uBAAOC,SAAQ,IAAI,CAACxB,MAAM,CAACC,IAAI;IAF/B;AA6GF"}