{"version":3,"sources":["../../../../src/services/base/base.service.ts"],"sourcesContent":["import { IDataTable, IFindAllPaginateOptions } from '@/interfaces/datatable.interface';\nimport { IUpdateAction, TRecord } from '@/interfaces/global.interface';\nimport { PrismaClient, Prisma } from '@prisma/client';\n\n/**\n * Base service class providing common CRUD operations for any Prisma model.\n * Extends this class to add model-specific services.\n * @template T - The type of the model being handled by the service.\n */\nexport abstract class BaseService<T extends object> {\n  protected readonly prisma: PrismaClient; // Prisma client instance\n  protected model: string; // The name of the model to work with\n\n  /**\n   * Initializes the BaseService with a model name.\n   * @param {string} modelName - The name of the model to use in queries.\n   */\n  constructor(modelName: string) {\n    // Optional: Uncomment the next line if using a centralized Prisma connection\n    // this.prisma = prisma; // Replace `prisma` with your centralized connection if necessary.\n\n    // Alternative: Initialize Prisma directly in BaseService (if no centralized connection)\n    this.prisma = new PrismaClient({\n      log: ['query', 'info', 'warn', 'error'],\n    }); // Initializes Prisma client\n    this.model = modelName; // Assigns the model name\n  }\n\n  /**\n   * Retrieves the attributes (fields) of the model.\n   * @returns {string[]} - An array of field names of the model.\n   */\n  protected getModelAttributes(): string[] {\n    // Retrieve the model fields from Prisma's data model\n    return Prisma.dmmf.datamodel.models.find(model => model.name === this.model)?.fields.map(field => field.name) || [];\n  }\n\n  /**\n   * Updates specific fields for multiple records.\n   * @param {IUpdateAction} action - The update action containing IDs and field to update.\n   * @returns {Promise<number>} - A promise that resolves to the count of updated rows.\n   * @throws {Error} - Throws an error if the update operation fails.\n   */\n  public async updateAction(\n    { ids, field }: IUpdateAction, // Field object with name and value\n  ): Promise<number> {\n    const { name, value } = field;\n\n    // Construct the update data dynamically\n    const updateData: TRecord = { [name]: value };\n\n    // Where clause to match the records by their IDs\n    const whereClause = { id: { in: ids } };\n\n    try {\n      // Perform the update action on the records\n      const updateResult = await this.prisma[this.model].updateMany({\n        where: whereClause,\n        data: updateData,\n      });\n\n      // Return the count of affected rows\n      return updateResult.count;\n    } catch (error) {\n      // Handle errors gracefully by throwing a specific error message\n      throw new Error(`Error updating column: ${error.message}`);\n    }\n  }\n\n  /**\n   * Retrieves paginated results of the model.\n   * @param {IFindAllPaginateOptions} options - Options for pagination, filtering, sorting, and global search.\n   * @returns {Promise<IDataTable<T>>} - A promise that resolves to a paginated table containing rows and count.\n   */\n  public async findAllPaginate({\n    pageNumber = 1,\n    perPage = 10,\n    filters = {},\n    q,\n    ignoreGlobal = [],\n    sort = 'createdAt',\n    order = 'ASC',\n  }: IFindAllPaginateOptions = {}): Promise<IDataTable<T>> {\n    // Calculate the offset (skip) for pagination\n    const skip = (pageNumber - 1) * perPage;\n\n    // Build the Prisma \"where\" clause based on filters and search query\n    const where: Prisma.UserWhereInput = this.buildWhereClause(filters, q, ignoreGlobal);\n\n    // Perform the query to get paginated results\n    const result = await this.prisma[this.model].findMany({\n      where,\n      skip,\n      take: perPage,\n      orderBy: {\n        [sort]: order.toLowerCase(), // Sort by the specified field and order (ASC/DESC)\n      },\n    });\n\n    // Count the total number of records that match the filters\n    const count = await this.prisma[this.model].count({ where });\n\n    // Return the paginated data and the total count\n    return {\n      count,\n      rows: result as T[],\n    };\n  }\n\n  /**\n   * Builds the Prisma \"where\" clause dynamically based on filters, global search, and ignored fields.\n   * @param {Record<string, any>} filters - Key-value pairs of fields to filter by.\n   * @param {string} [q] - Global search query.\n   * @param {string[]} [ignoreGlobal] - Fields to ignore in the global search.\n   * @returns {Prisma.UserWhereInput} - The dynamically constructed where clause.\n   */\n  private buildWhereClause(filters: Record<string, any>, q?: string, ignoreGlobal: string[] = []): Prisma.UserWhereInput {\n    const whereClause: Prisma.UserWhereInput = {};\n\n    // Add field-specific filters to the where clause\n    Object.keys(filters).forEach(key => {\n      if (filters[key] !== undefined && key !== 'q') {\n        // Apply string filters with case-insensitive match\n        if (typeof filters[key] === 'string') {\n          whereClause[key] = {\n            contains: filters[key],\n            mode: 'insensitive',\n          };\n        } else {\n          whereClause[key] = filters[key]; // Apply non-string filters directly\n        }\n      }\n    });\n\n    // Add global search conditions if the search query `q` is provided\n    if (q) {\n      const globalSearchConditions: Prisma.UserWhereInput[] = [];\n\n      // Iterate over the model fields (attributes) for global search\n      for (const key of Object.keys(this.getModelAttributes())) {\n        if (!ignoreGlobal.includes(key)) {\n          // Add global search condition for the field\n          globalSearchConditions.push({\n            [key]: {\n              contains: q,\n              mode: 'insensitive',\n            },\n          });\n        }\n      }\n\n      // Combine global search conditions using AND operator\n      if (globalSearchConditions.length > 0) {\n        whereClause.AND = globalSearchConditions;\n      }\n    }\n\n    return whereClause;\n  }\n}\n"],"names":["BaseService","getModelAttributes","Prisma","dmmf","datamodel","models","find","model","name","fields","map","field","updateAction","ids","value","updateData","whereClause","id","in","updateResult","prisma","updateMany","where","data","count","error","Error","message","findAllPaginate","pageNumber","perPage","filters","q","ignoreGlobal","sort","order","skip","buildWhereClause","result","findMany","take","orderBy","toLowerCase","rows","Object","keys","forEach","key","undefined","contains","mode","globalSearchConditions","includes","push","length","AND","constructor","modelName","PrismaClient","log"],"mappings":"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"}