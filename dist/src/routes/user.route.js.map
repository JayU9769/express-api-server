{"version":3,"sources":["../../../src/routes/user.route.ts"],"sourcesContent":["import { Router } from 'express';\nimport { UserController } from '@/controllers/user.controller';\nimport { CreateUserDto, UpdateUserDto } from '@/dtos/user.dto';\nimport { Routes } from '@/interfaces/route.interface';\nimport { ValidationMiddleware } from '@/middlewares/validation.middleware';\nimport { DeleteActionDto, UpdateActionDto } from '@/dtos/global.dto';\nimport { isAuthenticated } from '@/middlewares/auth.middleware';\nimport { UpdateAdminPasswordDto } from '@/dtos/admin.dto';\nimport checkPermission from '@/middlewares/checkPermission.middleware';\n\n/**\n * UserRoute class handles the routing for user-related API endpoints.\n * It initializes routes for CRUD operations and bulk actions on users.\n */\nexport class UserRoute implements Routes {\n  public path = '/users'; // Base path for all user-related routes\n  public router = Router(); // Express router instance to define routes\n  public user = new UserController(); // Controller to handle user business logic\n\n  constructor() {\n    // Initialize the routes when the UserRoute class is instantiated\n    this.initializeRoutes();\n  }\n\n  /**\n   * Initializes all routes for users.\n   * Includes endpoints for creating, updating, deleting, and fetching users,\n   * as well as handling bulk update actions.\n   */\n  private initializeRoutes() {\n    // Route to get all users with optional pagination, sorting, and filtering\n    this.router.get(`${this.path}`, isAuthenticated, checkPermission('user-view'), this.user.getUsers);\n\n    // Route to get a specific user by their ID\n    this.router.get(`${this.path}/:id`, isAuthenticated, checkPermission('user-view'), this.user.getUserById);\n\n    // Route to create a new user, with validation for the incoming data\n    this.router.post(`${this.path}`, isAuthenticated, checkPermission('user-create'), ValidationMiddleware(CreateUserDto), this.user.createUser);\n\n    // Route to update an existing user by their ID, with validation for the incoming data\n    this.router.put(\n      `${this.path}/:id`,\n      isAuthenticated,\n      checkPermission('user-update'),\n      ValidationMiddleware(UpdateUserDto, false, true),\n      this.user.updateUser,\n    );\n\n    // Route to delete one or more users by their IDs, with validation for the incoming IDs\n    this.router.delete(`${this.path}`, isAuthenticated, checkPermission('user-delete'), ValidationMiddleware(DeleteActionDto), this.user.deleteUser);\n\n    // Route to update multiple users using a bulk action, with validation for the action data\n    this.router.post(\n      `${this.path}/update-action`,\n      isAuthenticated,\n      checkPermission('user-update'),\n      ValidationMiddleware(UpdateActionDto),\n      this.user.updateAction,\n    );\n\n    // Route to update selected user password\n    this.router.patch(\n      `${this.path}/change-password/:id`,\n      isAuthenticated,\n      ValidationMiddleware(UpdateAdminPasswordDto, false, true),\n      this.user.updateAdminPassword,\n    );\n  }\n}\n"],"names":["UserRoute","initializeRoutes","router","get","path","isAuthenticated","checkPermission","user","getUsers","getUserById","post","ValidationMiddleware","CreateUserDto","createUser","put","UpdateUserDto","updateUser","delete","DeleteActionDto","deleteUser","UpdateActionDto","updateAction","patch","UpdateAdminPasswordDto","updateAdminPassword","constructor","Router","UserController"],"mappings":";;;;+BAcaA;;;eAAAA;;;yBAdU;gCACQ;yBACc;sCAER;2BACY;gCACjB;0BACO;kFACX;;;;;;;;;;;;;;;;;;;AAMrB,IAAA,AAAMA,YAAN,MAAMA;IAeHC,mBAAmB;QAEzB,IAAI,CAACC,MAAM,CAACC,GAAG,CAAC,CAAC,EAAE,IAAI,CAACC,IAAI,CAAC,CAAC,EAAEC,+BAAe,EAAEC,IAAAA,kCAAe,EAAC,cAAc,IAAI,CAACC,IAAI,CAACC,QAAQ;QAGjG,IAAI,CAACN,MAAM,CAACC,GAAG,CAAC,CAAC,EAAE,IAAI,CAACC,IAAI,CAAC,IAAI,CAAC,EAAEC,+BAAe,EAAEC,IAAAA,kCAAe,EAAC,cAAc,IAAI,CAACC,IAAI,CAACE,WAAW;QAGxG,IAAI,CAACP,MAAM,CAACQ,IAAI,CAAC,CAAC,EAAE,IAAI,CAACN,IAAI,CAAC,CAAC,EAAEC,+BAAe,EAAEC,IAAAA,kCAAe,EAAC,gBAAgBK,IAAAA,0CAAoB,EAACC,sBAAa,GAAG,IAAI,CAACL,IAAI,CAACM,UAAU;QAG3I,IAAI,CAACX,MAAM,CAACY,GAAG,CACb,CAAC,EAAE,IAAI,CAACV,IAAI,CAAC,IAAI,CAAC,EAClBC,+BAAe,EACfC,IAAAA,kCAAe,EAAC,gBAChBK,IAAAA,0CAAoB,EAACI,sBAAa,EAAE,OAAO,OAC3C,IAAI,CAACR,IAAI,CAACS,UAAU;QAItB,IAAI,CAACd,MAAM,CAACe,MAAM,CAAC,CAAC,EAAE,IAAI,CAACb,IAAI,CAAC,CAAC,EAAEC,+BAAe,EAAEC,IAAAA,kCAAe,EAAC,gBAAgBK,IAAAA,0CAAoB,EAACO,0BAAe,GAAG,IAAI,CAACX,IAAI,CAACY,UAAU;QAG/I,IAAI,CAACjB,MAAM,CAACQ,IAAI,CACd,CAAC,EAAE,IAAI,CAACN,IAAI,CAAC,cAAc,CAAC,EAC5BC,+BAAe,EACfC,IAAAA,kCAAe,EAAC,gBAChBK,IAAAA,0CAAoB,EAACS,0BAAe,GACpC,IAAI,CAACb,IAAI,CAACc,YAAY;QAIxB,IAAI,CAACnB,MAAM,CAACoB,KAAK,CACf,CAAC,EAAE,IAAI,CAAClB,IAAI,CAAC,oBAAoB,CAAC,EAClCC,+BAAe,EACfM,IAAAA,0CAAoB,EAACY,gCAAsB,EAAE,OAAO,OACpD,IAAI,CAAChB,IAAI,CAACiB,mBAAmB;IAEjC;IAhDAC,aAAc;QAJd,uBAAOrB,QAAO;QACd,uBAAOF,UAASwB,IAAAA,eAAM;QACtB,uBAAOnB,QAAO,IAAIoB,8BAAc;QAI9B,IAAI,CAAC1B,gBAAgB;IACvB;AA8CF"}