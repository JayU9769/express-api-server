{"version":3,"sources":["../../../src/routes/admin.route.ts"],"sourcesContent":["import { Router } from 'express';\nimport { Routes } from '@/interfaces/route.interface';\nimport { ValidationMiddleware } from '@/middlewares/validation.middleware';\nimport { CreateAdminDto, LoginAdminDto, UpdateAdminDto, UpdateAdminPasswordDto, UpdatePasswordDto, UpdateProfileDto } from '@/dtos/admin.dto';\nimport { AdminController } from '@/controllers/admin.controller';\nimport { isAuthenticated } from '@/middlewares/auth.middleware';\nimport { DeleteActionDto, UpdateActionDto } from '@/dtos/global.dto';\nimport checkPermission from '@/middlewares/checkPermission.middleware';\n\nexport class AdminRoute implements Routes {\n  public path = '/admins';\n  public router = Router();\n  public admin = new AdminController();\n\n  constructor() {\n    this.initializeRoutes();\n  }\n\n  private initializeRoutes() {\n    this.router.post(`${this.path}/login`, ValidationMiddleware(LoginAdminDto), this.admin.login);\n\n    // Profile route - Requires authentication\n    this.router.get(`${this.path}/profile`, isAuthenticated, this.admin.getProfile);\n\n    // Logout route\n    this.router.post(`${this.path}/logout`, isAuthenticated, this.admin.logout);\n\n    // Update profile route\n    this.router.patch(`${this.path}/profile`, isAuthenticated, ValidationMiddleware(UpdateProfileDto), this.admin.updateProfile);\n\n    // Update password route\n    this.router.put(`${this.path}/change-password`, isAuthenticated, ValidationMiddleware(UpdatePasswordDto), this.admin.updatePassword);\n\n    // CRUD ROUTES to get all users with optional pagination, sorting, and filtering\n    this.router.get(`${this.path}`, isAuthenticated, checkPermission('admin-view'), this.admin.getAdmins);\n\n    // Route to get a specific user by their ID\n    this.router.get(`${this.path}/:id`, isAuthenticated, checkPermission('admin-view'), this.admin.getAdminById);\n\n    // Route to create a new user, with validation for the incoming data\n    this.router.post(`${this.path}`, isAuthenticated, checkPermission('admin-create'), ValidationMiddleware(CreateAdminDto), this.admin.createAdmin);\n\n    // Route to update an existing user by their ID, with validation for the incoming data\n    this.router.put(\n      `${this.path}/:id`,\n      isAuthenticated,\n      checkPermission('admin-update'),\n      ValidationMiddleware(UpdateAdminDto, false, true),\n      this.admin.updateAdmin,\n    );\n\n    // Route to delete one or more users by their IDs, with validation for the incoming IDs\n    this.router.delete(\n      `${this.path}`,\n      isAuthenticated,\n      checkPermission('admin-delete'),\n      ValidationMiddleware(DeleteActionDto),\n      this.admin.deleteAdmin,\n    );\n\n    // Route to update multiple users using a bulk action, with validation for the action data\n    this.router.post(\n      `${this.path}/update-action`,\n      isAuthenticated,\n      checkPermission('admin-update'),\n      ValidationMiddleware(UpdateActionDto),\n      this.admin.updateAction,\n    );\n\n    // Route to update selected user password\n    this.router.patch(\n      `${this.path}/change-password/:id`,\n      isAuthenticated,\n      ValidationMiddleware(UpdateAdminPasswordDto, false, true),\n      this.admin.updateAdminPassword,\n    );\n  }\n}\n"],"names":["AdminRoute","initializeRoutes","router","post","path","ValidationMiddleware","LoginAdminDto","admin","login","get","isAuthenticated","getProfile","logout","patch","UpdateProfileDto","updateProfile","put","UpdatePasswordDto","updatePassword","checkPermission","getAdmins","getAdminById","CreateAdminDto","createAdmin","UpdateAdminDto","updateAdmin","delete","DeleteActionDto","deleteAdmin","UpdateActionDto","updateAction","UpdateAdminPasswordDto","updateAdminPassword","constructor","Router","AdminController"],"mappings":"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"}