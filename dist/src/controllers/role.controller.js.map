{"version":3,"sources":["../../../src/controllers/role.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport { Container } from 'typedi';\nimport { RoleService } from '@/services/role.service';\nimport { IDataTable, IFindAllPaginateOptions } from '@/interfaces/datatable.interface';\nimport { IUpdateAction, TSortType } from '@/interfaces/global.interface';\nimport { Role } from '@prisma/client';\n\n/**\n * Controller handling role-related HTTP requests.\n */\nexport class RoleController {\n  public role = Container.get(RoleService);\n\n  /**\n   * Retrieves a paginated list of roles based on query parameters.\n   * Supports pagination, filtering, sorting, and search.\n   * @method get\n   * @param req Express request object\n   * @param res Express response object\n   * @param next Express next function for error handling\n   */\n  public getRoles = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      // Destructure query parameters with default values\n      const { pageNumber = 0, perPage = 10, sort = 'createdAt', order = 'ASC', ...filters } = req.query;\n\n      // Prepare options for pagination and filtering\n      const options: IFindAllPaginateOptions = {\n        pageNumber: Number(pageNumber) + 1,\n        perPage: Number(perPage),\n        filters: filters,\n        q: req.query.q as string,\n        ignoreGlobal: (req.query.ignoreGlobal as string)?.split(',') || [],\n        sort: String(sort),\n        order: String(order).toUpperCase() as TSortType,\n      };\n\n      // Fetch paginated role data\n      const findAllRolesData: IDataTable<Role> = await this.role.findAllPaginate(options);\n\n      // Respond with the fetched data\n      res.status(200).json({ data: findAllRolesData, message: 'findAll' });\n    } catch (error) {\n      // Pass any errors to the next error handling middleware\n      next(error);\n    }\n  };\n\n  /**\n   * Retrieves a single role by its ID.\n   * @method get\n   * @param req Express request object with role ID in params\n   * @param res Express response object\n   * @param next Express next function for error handling\n   */\n  public getRoleById = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const roleId: string = req.params.id;\n      // Find role by ID\n      const findOneRoleData: Role = await this.role.findById(roleId);\n\n      // Respond with the fetched role data\n      res.status(200).json({ data: findOneRoleData, message: 'findOne' });\n    } catch (error) {\n      // Pass any errors to the next error handling middleware\n      next(error);\n    }\n  };\n\n  /**\n   * Creates a new role with provided data.\n   * @method post\n   * @param req Express request object with role data in body\n   * @param res Express response object\n   * @param next Express next function for error handling\n   */\n  public createRole = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const roleData: Role = req.body;\n      // Create new role\n      const createRoleData: Role = await this.role.create(roleData);\n\n      // Respond with the created role data\n      res.status(201).json({ data: createRoleData, message: 'created' });\n    } catch (error) {\n      // Pass any errors to the next error handling middleware\n      next(error);\n    }\n  };\n\n  /**\n   * Updates an existing role with provided data.\n   * @method put\n   * @param req Express request object with role ID in params and role data in body\n   * @param res Express response object\n   * @param next Express next function for error handling\n   */\n  public updateRole = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const roleId: string = req.params.id;\n      const roleData: Role = req.body;\n      // Update role by ID\n      const updateRoleData: Role = await this.role.update(roleId, roleData);\n\n      // Respond with the updated role data\n      res.status(200).json({ data: updateRoleData, message: 'updated' });\n    } catch (error) {\n      // Pass any errors to the next error handling middleware\n      next(error);\n    }\n  };\n\n  /**\n   * Deletes a role by its ID.\n   * @method delete\n   * @param req Express request object with role ID in params\n   * @param res Express response object\n   * @param next Express next function for error handling\n   */\n  public deleteRole = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const roleIds: string[] = req.body.ids;\n      // Delete role by ID\n      await this.role.delete(roleIds);\n\n      // Respond with success message\n      res.status(200).json({ message: 'deleted' });\n    } catch (error) {\n      // Pass any errors to the next error handling middleware\n      next(error);\n    }\n  };\n\n  /**\n   * Single action a role by its ID & Type.\n   * @method post\n   * @param req Express request object with role ID in params\n   * @param res Express response object\n   * @param next Express next function for error handling\n   */\n  public updateAction = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const { ids, field }: IUpdateAction = req.body;\n\n      await this.role.updateAction({ ids, field });\n\n      // Respond with success message\n      res.status(200).json({ message: 'Updated Bulk Action' });\n    } catch (error) {\n      // Pass any errors to the next error handling middleware\n      next(error);\n    }\n  };\n}\n"],"names":["RoleController","role","Container","get","RoleService","getRoles","req","res","next","query","pageNumber","perPage","sort","order","filters","options","Number","q","ignoreGlobal","split","String","toUpperCase","findAllRolesData","findAllPaginate","status","json","data","message","error","getRoleById","roleId","params","id","findOneRoleData","findById","createRole","roleData","body","createRoleData","create","updateRole","updateRoleData","update","deleteRole","roleIds","ids","delete","updateAction","field"],"mappings":"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"}