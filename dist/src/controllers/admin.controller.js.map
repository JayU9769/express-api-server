{"version":3,"sources":["../../../src/controllers/admin.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport { HttpException } from '@/exceptions/HttpException';\nimport { passport } from '@/config/passport';\nimport { Container } from 'typedi';\nimport { AdminService } from '@/services/admin.service';\nimport { Admin, UserType } from '@prisma/client';\nimport { IDataTable, IFindAllPaginateOptions } from '@/interfaces/datatable.interface';\nimport { IAuthUser, IUpdateAction, TSortType } from '@/interfaces/global.interface';\nimport * as console from 'node:console';\nimport RolePermissionService from '@/role-permissions/RolePermissionService';\nimport { PermissionService } from '@/services/permission.service';\n\n/**\n * Controller handling admin-related HTTP requests.\n */\nexport class AdminController {\n  // Initialize the AdminService via dependency injection\n  public admin = Container.get(AdminService);\n  public rolePermissionService = Container.get(RolePermissionService);\n  public permissionService = Container.get(PermissionService);\n\n  /**\n   * @description Handles admin login functionality using Passport's local strategy.\n   * @param req - Express request object.\n   * @param res - Express response object.\n   * @param next - Express next function to pass control to the next middleware.\n   * @returns A JSON response with a success message and admin data or an error.\n   */\n  public login = async (req: Request, res: Response, next: NextFunction) => {\n    passport.authenticate('admin-local', (e: Error, admin: Admin) => {\n      if (e || !admin) {\n        return next(new HttpException(401, 'Invalid credentials'));\n      }\n      req.login(admin, loginErr => {\n        if (loginErr) {\n          return next(new HttpException(500, 'Login failed'));\n        }\n        return res.status(200).json({ message: 'Logged in successfully', data: admin });\n      });\n    })(req, res, next);\n  };\n\n  /**\n   * @description Logs out the currently authenticated admin and clears the session cookie.\n   * @param req - Express request object.\n   * @param res - Express response object.\n   * @returns A JSON response indicating successful logout or an error message.\n   */\n  public logout = async (req: Request, res: Response) => {\n    req.logout(e => {\n      if (e) {\n        return res.status(500).json({ message: 'Error during logout' });\n      }\n      res.clearCookie('connect.sid'); // Clear session cookie\n      return res.status(200).json({ message: 'Logged out successfully' });\n    });\n  };\n\n  /**\n   * @description Retrieves the profile of the currently authenticated admin.\n   * @param req - Express request object.\n   * @param res - Express response object.\n   * @param next - Express next function to pass control to the next middleware.\n   * @returns A JSON response with the admins profile data or an error message.\n   */\n  public getProfile = async (req: Request, res: Response, next: NextFunction) => {\n    if (!req.user) {\n      return next(new HttpException(401, 'Not authenticated'));\n    }\n\n    const admin = req.user as IAuthUser;\n    const permission = await this.permissionService.getPermissions();\n\n    const mergedPermissions: string[] = admin.roles.reduce((acc, role) => {\n      const permissions = permission[UserType.admin][role] || []; // Get permissions for the role or an empty array\n      return [...acc, ...permissions]; // Merge permissions into accumulator\n    }, []);\n\n    // Remove duplicates using Set and return the result as an array\n    (req.user as IAuthUser).permissions = [...new Set(mergedPermissions)];\n\n    // Save the updated session\n    req.session.save(err => {\n      if (err) {\n        return next(err);\n      }\n    });\n\n    return res.status(200).json({ message: 'Admin Profile', data: req.user });\n  };\n\n  /**\n   * @description Updates the profile details of the currently authenticated admin.\n   * @param req - Express request object.\n   * @param res - Express response object.\n   * @param next - Express next function to pass control to the next middleware.\n   * @returns A JSON response with the updated admin data or an error message.\n   */\n  public updateProfile = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const { name, email } = req.body;\n      const admin = req.user as IAuthUser; // Extract the admins ID from req.admin\n      const updatedAdmin = await this.admin.updateProfile(admin.id, name, email);\n\n      // Update the session with the new profile data\n      admin.name = updatedAdmin.name;\n      admin.email = updatedAdmin.email;\n\n      req.user = admin;\n\n      // Save the updated session\n      req.session.save(err => {\n        if (err) {\n          return next(err);\n        }\n      });\n\n      res.status(200).json({\n        message: 'Profile updated successfully',\n        data: updatedAdmin,\n      });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  /**\n   * @description Updates the password of the currently authenticated admin.\n   * @param req - Express request object.\n   * @param res - Express response object.\n   * @param next - Express next function to pass control to the next middleware.\n   * @returns A JSON response indicating successful password update or an error message.\n   */\n  public updatePassword = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const { currentPassword, newPassword } = req.body;\n      const adminId = (req.user as Admin).id; // Extract the admins ID from req.admin\n\n      await this.admin.updatePassword(adminId, currentPassword, newPassword);\n\n      res.clearCookie('connect.sid'); // Clear session cookie\n\n      res.status(200).json({ message: 'Password updated successfully' });\n    } catch (error) {\n      next(error); // Pass any errors to the error handling middleware\n    }\n  };\n\n  /**\n   * Retrieves a paginated list of admins based on query parameters.\n   * Supports pagination, filtering, sorting, and search.\n   * @method get\n   * @param req Express request object\n   * @param res Express response object\n   * @param next Express next function for error handling\n   */\n  public getAdmins = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      // Destructure query parameters with default values\n      const { pageNumber = 0, perPage = 10, sort = 'createdAt', order = 'ASC', ...filters } = req.query;\n\n      // Prepare options for pagination and filtering\n      const options: IFindAllPaginateOptions = {\n        pageNumber: Number(pageNumber) + 1,\n        perPage: Number(perPage),\n        filters: filters,\n        q: req.query.q as string,\n        ignoreGlobal: (req.query.ignoreGlobal as string)?.split(',') || [],\n        sort: String(sort),\n        order: String(order).toUpperCase() as TSortType,\n      };\n\n      // Fetch paginated admin data\n      const findAllAdminsData: IDataTable<Admin> = await this.admin.findAllPaginate(options);\n      // Respond with the fetched data\n      res.status(200).json({ data: findAllAdminsData, message: 'findAll' });\n    } catch (error) {\n      // Pass any errors to the next error handling middleware\n      next(error);\n    }\n  };\n\n  /**\n   * Retrieves a single admin by their ID.\n   * @method get\n   * @param req Express request object with admin ID in params\n   * @param res Express response object\n   * @param next Express next function for error handling\n   */\n  public getAdminById = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const adminId: string = req.params.id;\n      // Find admin by ID\n      const findOneAdminData: Admin = await this.admin.findById(adminId);\n\n      const roles = await this.rolePermissionService.getRoles(adminId, 'admin');\n\n      // Respond with the fetched admin data\n      res.status(200).json({ data: { ...findOneAdminData, roles: roles.map(role => role.id) }, message: 'findOne' });\n    } catch (error) {\n      // Pass any errors to the next error handling middleware\n      next(error);\n    }\n  };\n\n  /**\n   * Creates a new admin with provided data.\n   * @method post\n   * @param req Express request object with admin data in body\n   * @param res Express response object\n   * @param next Express next function for error handling\n   */\n  public createAdmin = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const { roles, ...rest } = req.body;\n      const adminData: Admin = rest;\n      // Create new admin\n      const createAdminData: Admin = await this.admin.create(adminData);\n\n      if (roles.length > 0) {\n        this.rolePermissionService.syncRoles(createAdminData.id, roles, 'admin');\n      }\n\n      // Respond with the created admin data\n      res.status(201).json({ data: createAdminData, message: 'created' });\n    } catch (error) {\n      // Pass any errors to the next error handling middleware\n      next(error);\n    }\n  };\n\n  /**\n   * Updates an existing admin with provided data.\n   * @method put\n   * @param req Express request object with admin ID in params and admin data in body\n   * @param res Express response object\n   * @param next Express next function for error handling\n   */\n  public updateAdmin = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const adminId: string = req.params.id;\n      const { roles, ...rest } = req.body;\n      const adminData: Admin = rest;\n      // // Update admin by ID\n      const updateAdminData: Admin = await this.admin.update(adminId, adminData);\n\n      if (roles.length > 0) {\n        this.rolePermissionService.syncRoles(adminId, roles, 'admin');\n      }\n\n      // Respond with the updated admin data\n      res.status(200).json({ data: updateAdminData, message: 'updated' });\n    } catch (error) {\n      // Pass any errors to the next error handling middleware\n      next(error);\n    }\n  };\n\n  /**\n   * Deletes a admin by their ID.\n   * @method delete\n   * @param req Express request object with admin ID in params\n   * @param res Express response object\n   * @param next Express next function for error handling\n   */\n  public deleteAdmin = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const adminIds: string[] = req.body.ids;\n      // Delete admin by ID\n      await this.admin.delete(adminIds);\n\n      // Respond with success message\n      res.status(200).json({ message: 'deleted' });\n    } catch (error) {\n      // Pass any errors to the next error handling middleware\n      next(error);\n    }\n  };\n\n  /**\n   * Single action a admins by their ID & Type.\n   * @method post\n   * @param req Express request object with admin ID in params\n   * @param res Express response object\n   * @param next Express next function for error handling\n   */\n  public updateAction = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const { ids, field }: IUpdateAction = req.body;\n\n      await this.admin.updateAction({ ids, field });\n\n      // Respond with success message\n      res.status(200).json({ message: 'Updated Bulk Action' });\n    } catch (error) {\n      // Pass any errors to the next error handling middleware\n      next(error);\n    }\n  };\n\n  public updateAdminPassword = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const { newPassword, confirmNewPassword } = req.body;\n\n      const adminId: string = req.params.id;\n\n      // Check if newPassword and confirmNewPassword match\n      if (newPassword !== confirmNewPassword) {\n        return res.status(422).json({ error: 'New password and confirm password do not match' });\n      }\n\n      await this.admin.updatePasswordWithoutCurrent(adminId, newPassword);\n\n      res.status(200).json({ message: 'Password updated successfully' });\n    } catch (error) {\n      next(error); // Pass any errors to the error handling middleware\n    }\n  };\n}\n"],"names":["AdminController","admin","Container","get","AdminService","rolePermissionService","RolePermissionService","permissionService","PermissionService","login","req","res","next","passport","authenticate","e","HttpException","loginErr","status","json","message","data","logout","clearCookie","getProfile","user","permission","getPermissions","mergedPermissions","roles","reduce","acc","role","permissions","UserType","Set","session","save","err","updateProfile","name","email","body","updatedAdmin","id","error","updatePassword","currentPassword","newPassword","adminId","getAdmins","query","pageNumber","perPage","sort","order","filters","options","Number","q","ignoreGlobal","split","String","toUpperCase","findAllAdminsData","findAllPaginate","getAdminById","params","findOneAdminData","findById","getRoles","map","createAdmin","rest","adminData","createAdminData","create","length","syncRoles","updateAdmin","updateAdminData","update","deleteAdmin","adminIds","ids","delete","updateAction","field","updateAdminPassword","confirmNewPassword","updatePasswordWithoutCurrent"],"mappings":"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"}