{"version":3,"sources":["../../../src/controllers/permission.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport { Container } from 'typedi';\nimport { RoleService } from '@/services/role.service';\nimport { EUserType, IUpdateAction } from '@/interfaces/global.interface';\nimport { PermissionService } from '@/services/permission.service';\nimport { HttpException } from '@/exceptions/HttpException';\nimport { IUpdatePermission } from '@/interfaces/permission.interface';\n\n/**\n * Controller handling permission-related HTTP requests.\n */\nexport class PermissionController {\n  public role = Container.get(RoleService);\n  public permission = Container.get(PermissionService);\n\n  /**\n   * Retrieves a paginated list of permissions based on query parameters.\n   * Supports pagination, filtering, sorting, and search.\n   * @method get\n   * @param req Express request object\n   * @param res Express response object\n   * @param next Express next function for error handling\n   */\n  public getPermissions = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const type = req.query.type;\n\n      if (!type) {\n        throw new HttpException(422, 'Type is Required');\n      }\n\n      const permissions = await this.permission.findAll(type as EUserType);\n      const roleHasPermissions = await this.permission.findAllRoleHasPermissions();\n      const roles = await this.role.findAll(type as EUserType);\n\n      // Respond with the fetched data\n      res.status(200).json({\n        data: {\n          permissions,\n          roles,\n          roleHasPermissions,\n        },\n        message: 'findAll',\n      });\n    } catch (error) {\n      // Pass any errors to the next error handling middleware\n      next(error);\n    }\n  };\n\n  public updatePermission = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const body: IUpdatePermission = req.body;\n\n      await this.permission.updatePermission(body);\n\n      // Respond with success message\n      res.status(200).json({ message: 'Permission updated' });\n    } catch (error) {\n      // Pass any errors to the next error handling middleware\n      next(error);\n    }\n  };\n}\n"],"names":["PermissionController","role","Container","get","RoleService","permission","PermissionService","getPermissions","req","res","next","type","query","HttpException","permissions","findAll","roleHasPermissions","findAllRoleHasPermissions","roles","status","json","data","message","error","updatePermission","body"],"mappings":";;;;+BAWaA;;;eAAAA;;;wBAVa;6BACE;mCAEM;+BACJ;;;;;;;;;;;;;;AAMvB,IAAA,AAAMA,uBAAN,MAAMA;;QACX,uBAAOC,QAAOC,iBAAS,CAACC,GAAG,CAACC,wBAAW;QACvC,uBAAOC,cAAaH,iBAAS,CAACC,GAAG,CAACG,oCAAiB;QAUnD,uBAAOC,kBAAiB,OAAOC,KAAcC,KAAeC;YAC1D,IAAI;gBACF,MAAMC,OAAOH,IAAII,KAAK,CAACD,IAAI;gBAE3B,IAAI,CAACA,MAAM;oBACT,MAAM,IAAIE,4BAAa,CAAC,KAAK;gBAC/B;gBAEA,MAAMC,cAAc,MAAM,IAAI,CAACT,UAAU,CAACU,OAAO,CAACJ;gBAClD,MAAMK,qBAAqB,MAAM,IAAI,CAACX,UAAU,CAACY,yBAAyB;gBAC1E,MAAMC,QAAQ,MAAM,IAAI,CAACjB,IAAI,CAACc,OAAO,CAACJ;gBAGtCF,IAAIU,MAAM,CAAC,KAAKC,IAAI,CAAC;oBACnBC,MAAM;wBACJP;wBACAI;wBACAF;oBACF;oBACAM,SAAS;gBACX;YACF,EAAE,OAAOC,OAAO;gBAEdb,KAAKa;YACP;QACF;QAEA,uBAAOC,oBAAmB,OAAOhB,KAAcC,KAAeC;YAC5D,IAAI;gBACF,MAAMe,OAA0BjB,IAAIiB,IAAI;gBAExC,MAAM,IAAI,CAACpB,UAAU,CAACmB,gBAAgB,CAACC;gBAGvChB,IAAIU,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEE,SAAS;gBAAqB;YACvD,EAAE,OAAOC,OAAO;gBAEdb,KAAKa;YACP;QACF;;AACF"}