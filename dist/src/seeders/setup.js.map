{"version":3,"sources":["../../../src/seeders/setup.ts"],"sourcesContent":["import { Admin, Permission, PrismaClient, Role, ModelHasRole, UserType } from '@prisma/client';\nimport bcrypt from 'bcryptjs';\n\n/**\n * The Setup class initializes the default roles, permissions, and admin accounts\n * in the database using Prisma ORM. It handles inserting roles, permissions,\n * admin users, and assigning permissions to roles and roles to admins.\n */\nclass Setup {\n  // Initialize Prisma Client to interact with the database\n  private prisma = new PrismaClient();\n  // Default password for the admin account\n  private defaultPassword = '12345678';\n  // Timestamp to be used for 'createdAt' and 'updatedAt' fields\n  private timestamp = new Date();\n\n  /**\n   * List of default roles to be created. Excludes 'id' since it will be auto-generated.\n   */\n  public defaultRoles: Omit<Role, 'id'>[] = [\n    {\n      name: 'admin',\n      type: 'admin',\n      status: 1,\n      isSystem: 1,\n      createdAt: this.timestamp,\n      updatedAt: this.timestamp,\n    },\n  ];\n\n  // List of roles to assign to the default admin account\n  private rolesForAdmin = ['admin'];\n\n  /**\n   * List of default permissions to be created. Includes dynamic CRUD permissions\n   * (create, view, update, delete) for role, admin, and user.\n   */\n  public defaultPermissions: Omit<Permission, 'id'>[] = [\n    {\n      name: 'role',\n      type: 'admin',\n      parentId: null,\n      createdAt: this.timestamp,\n      updatedAt: this.timestamp,\n    },\n    {\n      name: 'admin',\n      type: 'admin',\n      parentId: null,\n      createdAt: this.timestamp,\n      updatedAt: this.timestamp,\n    },\n    {\n      name: 'user',\n      type: 'admin',\n      parentId: null,\n      createdAt: this.timestamp,\n      updatedAt: this.timestamp,\n    },\n    {\n      name: 'admin-dashboard',\n      type: 'admin',\n      parentId: 'admin',\n      createdAt: this.timestamp,\n      updatedAt: this.timestamp,\n    },\n    // Generate CRUD permissions for 'role', 'admin', and 'user'\n    ...['create', 'view', 'update', 'delete'].flatMap(\n      action =>\n        ['role', 'admin', 'user'].map(parent => ({\n          name: `${parent}-${action}`,\n          type: 'admin',\n          parentId: parent,\n          createdAt: this.timestamp,\n          updatedAt: this.timestamp,\n        })) as Omit<Permission, 'id'>[],\n    ),\n    {\n      name: 'admin-permission',\n      type: 'admin',\n      parentId: 'admin',\n      createdAt: this.timestamp,\n      updatedAt: this.timestamp,\n    },\n  ];\n\n  /**\n   * List of default admin users to be created. Excludes 'id' since it will be auto-generated.\n   * Passwords are hashed using bcrypt.\n   */\n  public defaultAdmins: Omit<Admin, 'id'>[] = [\n    {\n      email: 'admin@admin.com',\n      name: 'Admin',\n      password: bcrypt.hashSync(this.defaultPassword),\n      status: 1,\n      isSystem: 1,\n      createdAt: this.timestamp,\n      updatedAt: this.timestamp,\n    },\n  ];\n\n  /**\n   * Initializes the setup process by inserting default roles, permissions, and admins,\n   * and assigning roles to admins.\n   */\n  async init() {\n    console.info('Setup Started...');\n    // Run the insert operations in parallel for efficiency\n    await Promise.all([this.insertRoles(), this.insertAdmins(), this.insertPermissions()]);\n    // Assign permissions to the role and role to admins\n    this.assignPermissionsToRole();\n    await this.assignRoleToAdmin();\n    console.info('Setup Complete...');\n  }\n\n  /**\n   * Inserts the default roles into the database. Skips inserting any duplicates\n   * based on role name.\n   */\n  private async insertRoles() {\n    console.info('Inserting Roles...');\n    await this.prisma.role.createMany({\n      data: this.defaultRoles,\n      skipDuplicates: true,\n    });\n  }\n\n  /**\n   * Inserts the default permissions into the database.\n   * First inserts parent permissions (those without a parentId),\n   * and then links child permissions to their parent using parentId.\n   */\n  private async insertPermissions() {\n    console.info('Inserting Permissions...');\n\n    // Separate parent and child permissions\n    const parentPermissions = this.defaultPermissions.filter(p => !p.parentId);\n    const childPermissions = this.defaultPermissions.filter(p => p.parentId);\n\n    // Insert parent permissions\n    await this.prisma.permission.createMany({\n      data: parentPermissions,\n      skipDuplicates: true,\n    });\n\n    // Fetch parent permissions from the database\n    const parentRecords = await this.prisma.permission.findMany({\n      where: {\n        name: { in: parentPermissions.map(p => p.name) },\n      },\n      select: { id: true, name: true },\n    });\n\n    // Map parent permission names to their IDs\n    const parentMap = new Map(parentRecords.map(p => [p.name, p.id]));\n\n    // Insert child permissions and link them to their parent ID\n    await this.prisma.permission.createMany({\n      data: childPermissions.map(p => ({\n        ...p,\n        parentId: parentMap.get(p.parentId),\n      })),\n      skipDuplicates: true,\n    });\n  }\n\n  /**\n   * Inserts default admin users into the database. Skips inserting any duplicates\n   * based on the email field.\n   */\n  private async insertAdmins() {\n    console.info('Inserting Admins...');\n    await this.prisma.admin.createMany({\n      data: this.defaultAdmins,\n      skipDuplicates: true,\n    });\n  }\n\n  /**\n   * Assigns the 'admin' role to the default admin users. Links each admin to\n   * the 'admin' role in the `ModelHasRole` table.\n   */\n  private async assignRoleToAdmin() {\n    console.info('Assigning roles to admins...');\n    // Fetch both admin users and roles to create role assignments\n    const [admins, roles] = await Promise.all([\n      this.prisma.admin.findMany({\n        where: {\n          email: { in: this.defaultAdmins.map(admin => admin.email) },\n        },\n        select: { id: true },\n      }),\n      this.prisma.role.findMany({\n        where: {\n          name: { in: this.rolesForAdmin },\n        },\n        select: { id: true },\n      }),\n    ]);\n\n    if (admins.length && roles.length) {\n      // Create the role assignments for each admin\n      const modelHasRole: Omit<ModelHasRole, 'id'>[] = admins.flatMap(admin =>\n        roles.map(role => ({\n          roleId: role.id,\n          modelType: 'admin',\n          modelId: admin.id,\n          createdAt: this.timestamp,\n          updatedAt: this.timestamp,\n        })),\n      );\n\n      // Insert the role assignments into the `ModelHasRole` table\n      await this.prisma.modelHasRole.createMany({\n        data: modelHasRole,\n        skipDuplicates: true,\n      });\n    }\n  }\n\n  /**\n   * Assigns permissions to the 'admin' role. Links permissions that are child permissions\n   * to the appropriate admin role in the `RoleHasPermission` table.\n   */\n  private async assignPermissionsToRole() {\n    console.info('Assigning permissions to roles...');\n    // Fetch all admin system roles\n    const roles = await this.prisma.role.findMany({\n      where: {\n        type: UserType.admin,\n        isSystem: 1,\n      },\n      select: { id: true },\n    });\n\n    // Fetch permissions that have a parentId (i.e., child permissions)\n    const permissions = await this.prisma.permission.findMany({\n      where: {\n        type: UserType.admin,\n        parentId: { not: null },\n      },\n      select: { id: true },\n    });\n\n    // Assign permissions to roles\n    const roleHasPermissions = roles.flatMap(role =>\n      permissions.map(permission => ({\n        roleId: role.id,\n        permissionId: permission.id,\n      })),\n    );\n\n    // Insert the role-permission assignments into the `RoleHasPermission` table\n    await this.prisma.roleHasPermission.createMany({\n      data: roleHasPermissions,\n    });\n  }\n}\n\n// Initialize and run the setup process\nnew Setup().init();\n"],"names":["Setup","init","console","info","Promise","all","insertRoles","insertAdmins","insertPermissions","assignPermissionsToRole","assignRoleToAdmin","prisma","role","createMany","data","defaultRoles","skipDuplicates","parentPermissions","defaultPermissions","filter","p","parentId","childPermissions","permission","parentRecords","findMany","where","name","in","map","select","id","parentMap","Map","get","admin","defaultAdmins","admins","roles","email","rolesForAdmin","length","modelHasRole","flatMap","roleId","modelType","modelId","createdAt","timestamp","updatedAt","type","UserType","isSystem","permissions","not","roleHasPermissions","permissionId","roleHasPermission","PrismaClient","defaultPassword","Date","status","action","parent","password","bcrypt","hashSync"],"mappings":"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"}