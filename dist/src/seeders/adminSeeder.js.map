{"version":3,"sources":["../../../src/seeders/adminSeeder.ts"],"sourcesContent":["import { faker } from '@faker-js/faker';\nimport { PrismaClient } from '@prisma/client';\nimport bcrypt from 'bcryptjs';\n\nexport async function seed(count: number) {\n  const prisma = new PrismaClient();\n  const users = [];\n  const status = [0, 1];\n\n  // Generate a salt\n  const salt = await bcrypt.genSalt(10);\n  const hashedPassword = await bcrypt.hash('12345678', salt);\n\n  for (let i = 0; i < count; i++) {\n    users.push({\n      name: faker.person.fullName(),\n      email: faker.internet.email(),\n      password: hashedPassword,\n      status: status[Math.floor(Math.random() * status.length)],\n    });\n  }\n\n  await prisma.admin.createMany({\n    data: users,\n  });\n\n  console.log(`${count} users have been seeded successfully.`);\n  await prisma.$disconnect(); // Close the Prisma client connection\n}\n"],"names":["seed","count","prisma","PrismaClient","users","status","salt","bcrypt","genSalt","hashedPassword","hash","i","push","name","faker","person","fullName","email","internet","password","Math","floor","random","length","admin","createMany","data","console","log","$disconnect"],"mappings":";;;;+BAIsBA;;;eAAAA;;;uBAJA;wBACO;iEACV;;;;;;AAEZ,eAAeA,KAAKC,KAAa;IACtC,MAAMC,SAAS,IAAIC,oBAAY;IAC/B,MAAMC,QAAQ,EAAE;IAChB,MAAMC,SAAS;QAAC;QAAG;KAAE;IAGrB,MAAMC,OAAO,MAAMC,iBAAM,CAACC,OAAO,CAAC;IAClC,MAAMC,iBAAiB,MAAMF,iBAAM,CAACG,IAAI,CAAC,YAAYJ;IAErD,IAAK,IAAIK,IAAI,GAAGA,IAAIV,OAAOU,IAAK;QAC9BP,MAAMQ,IAAI,CAAC;YACTC,MAAMC,YAAK,CAACC,MAAM,CAACC,QAAQ;YAC3BC,OAAOH,YAAK,CAACI,QAAQ,CAACD,KAAK;YAC3BE,UAAUV;YACVJ,QAAQA,MAAM,CAACe,KAAKC,KAAK,CAACD,KAAKE,MAAM,KAAKjB,OAAOkB,MAAM,EAAE;QAC3D;IACF;IAEA,MAAMrB,OAAOsB,KAAK,CAACC,UAAU,CAAC;QAC5BC,MAAMtB;IACR;IAEAuB,QAAQC,GAAG,CAAC,CAAC,EAAE3B,MAAM,qCAAqC,CAAC;IAC3D,MAAMC,OAAO2B,WAAW;AAC1B"}