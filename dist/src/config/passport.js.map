{"version":3,"sources":["../../../src/config/passport.ts"],"sourcesContent":["import passport from 'passport';\nimport { Strategy as LocalStrategy } from 'passport-local';\nimport bcrypt from 'bcryptjs';\nimport { Admin, PrismaClient, User, UserType } from '@prisma/client';\nimport { HttpException } from '@/exceptions/HttpException';\nimport { IAuthUser } from '@/interfaces/global.interface';\n\nconst prisma = new PrismaClient();\n\n/**\n * A singleton service class to manage Passport configuration and strategies.\n * It ensures that Passport is initialized only once and manages user authentication.\n */\nexport class PassportService {\n  private static instance: PassportService | null = null;\n\n  /**\n   * Private constructor to prevent direct instantiation.\n   */\n  private constructor() {\n    this.initialize();\n  }\n\n  /**\n   * Gets the singleton instance of the PassportService class.\n   * @returns The singleton instance of PassportService.\n   */\n  public static getInstance(): PassportService {\n    if (!PassportService.instance) {\n      PassportService.instance = new PassportService();\n    }\n    return PassportService.instance;\n  }\n\n  /**\n   * Initializes Passport strategies and serialization/deserialization logic.\n   */\n  private initialize(): void {\n    passport.use(\n      'admin-local',\n      new LocalStrategy({ usernameField: 'email' }, async (email: string, password: string, done: (err: any, user?: Admin, info?: any) => void) => {\n        try {\n          const admin = await prisma.admin.findUnique({\n            where: { email },\n          });\n          if (!admin) {\n            return done(new HttpException(401, 'No admin with that email'), null);\n          }\n\n          if (!admin.status) {\n            return done(new HttpException(401, 'Account has been deactivated!'), null);\n          }\n\n          const isMatch = await bcrypt.compare(password, admin.password);\n          if (!isMatch) {\n            return done(new HttpException(401, 'Provided password is invalid'), null);\n          }\n\n          const roles = await prisma.modelHasRole.findMany({\n            where: {\n              modelId: admin.id,\n              modelType: UserType.admin,\n            },\n            include: {\n              role: {\n                include: {\n                  roleHasPermissions: {\n                    include: {\n                      permission: true, // Including the permission object\n                    },\n                  },\n                },\n              },\n            },\n          });\n\n          const userRoles: string[] = [];\n          const permissions = roles.flatMap(userRole => {\n            userRoles.push(userRole.role.name);\n            return userRole.role.roleHasPermissions.map(rp => rp.permission.name);\n          });\n\n          const { password: _, ...rest } = admin;\n\n          return done(null, {\n            ...rest,\n            roles: userRoles,\n            permissions,\n          } as IAuthUser);\n        } catch (error) {\n          return done(new HttpException(500, 'Internal server error'), null);\n        }\n      }),\n    );\n\n    passport.serializeUser((user: IAuthUser, done) => {\n      const { password, ...rest } = user;\n      done(null, rest);\n    });\n\n    passport.deserializeUser(async (admin: IAuthUser, done) => {\n      try {\n        // const admin = await prisma.admin.findUnique({ where: { id } });\n        if (admin) {\n          return done(null, admin);\n        }\n\n        // const user = await prisma.user.findUnique({ where: { id } });\n        // if (user) {\n        //   return done(null, user);\n        // }\n\n        done(new HttpException(404, 'User not found'), null);\n      } catch (error) {\n        done(new HttpException(500, 'Internal server error'), null);\n      }\n    });\n  }\n}\nexport { passport };\n"],"names":["PassportService","passport","prisma","PrismaClient","getInstance","instance","initialize","use","LocalStrategy","usernameField","email","password","done","admin","findUnique","where","HttpException","status","isMatch","bcrypt","compare","roles","modelHasRole","findMany","modelId","id","modelType","UserType","include","role","roleHasPermissions","permission","userRoles","permissions","flatMap","userRole","push","name","map","rp","_","rest","error","serializeUser","user","deserializeUser"],"mappings":";;;;;;;;;;;IAaaA,eAAe;eAAfA;;IA0GJC,QAAQ;eAARA,iBAAQ;;;iEAvHI;+BACqB;iEACvB;wBACiC;+BACtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAG9B,MAAMC,SAAS,IAAIC,oBAAY;AAMxB,IAAA,AAAMH,kBAAN,MAAMA;IAcX,OAAcI,cAA+B;QAC3C,IAAI,CAACJ,gBAAgBK,QAAQ,EAAE;YAC7BL,gBAAgBK,QAAQ,GAAG,IAAIL;QACjC;QACA,OAAOA,gBAAgBK,QAAQ;IACjC;IAKQC,aAAmB;QACzBL,iBAAQ,CAACM,GAAG,CACV,eACA,IAAIC,uBAAa,CAAC;YAAEC,eAAe;QAAQ,GAAG,OAAOC,OAAeC,UAAkBC;YACpF,IAAI;gBACF,MAAMC,QAAQ,MAAMX,OAAOW,KAAK,CAACC,UAAU,CAAC;oBAC1CC,OAAO;wBAAEL;oBAAM;gBACjB;gBACA,IAAI,CAACG,OAAO;oBACV,OAAOD,KAAK,IAAII,4BAAa,CAAC,KAAK,6BAA6B;gBAClE;gBAEA,IAAI,CAACH,MAAMI,MAAM,EAAE;oBACjB,OAAOL,KAAK,IAAII,4BAAa,CAAC,KAAK,kCAAkC;gBACvE;gBAEA,MAAME,UAAU,MAAMC,iBAAM,CAACC,OAAO,CAACT,UAAUE,MAAMF,QAAQ;gBAC7D,IAAI,CAACO,SAAS;oBACZ,OAAON,KAAK,IAAII,4BAAa,CAAC,KAAK,iCAAiC;gBACtE;gBAEA,MAAMK,QAAQ,MAAMnB,OAAOoB,YAAY,CAACC,QAAQ,CAAC;oBAC/CR,OAAO;wBACLS,SAASX,MAAMY,EAAE;wBACjBC,WAAWC,gBAAQ,CAACd,KAAK;oBAC3B;oBACAe,SAAS;wBACPC,MAAM;4BACJD,SAAS;gCACPE,oBAAoB;oCAClBF,SAAS;wCACPG,YAAY;oCACd;gCACF;4BACF;wBACF;oBACF;gBACF;gBAEA,MAAMC,YAAsB,EAAE;gBAC9B,MAAMC,cAAcZ,MAAMa,OAAO,CAACC,CAAAA;oBAChCH,UAAUI,IAAI,CAACD,SAASN,IAAI,CAACQ,IAAI;oBACjC,OAAOF,SAASN,IAAI,CAACC,kBAAkB,CAACQ,GAAG,CAACC,CAAAA,KAAMA,GAAGR,UAAU,CAACM,IAAI;gBACtE;gBAEA,MAAM,EAAE1B,UAAU6B,CAAC,EAAW,GAAG3B,OAAT4B,kCAAS5B;oBAAzBF;;gBAER,OAAOC,KAAK,MAAM,wCACb6B;oBACHpB,OAAOW;oBACPC;;YAEJ,EAAE,OAAOS,OAAO;gBACd,OAAO9B,KAAK,IAAII,4BAAa,CAAC,KAAK,0BAA0B;YAC/D;QACF;QAGFf,iBAAQ,CAAC0C,aAAa,CAAC,CAACC,MAAiBhC;YACvC,MAAM,EAAED,QAAQ,EAAW,GAAGiC,MAATH,kCAASG;gBAAtBjC;;YACRC,KAAK,MAAM6B;QACb;QAEAxC,iBAAQ,CAAC4C,eAAe,CAAC,OAAOhC,OAAkBD;YAChD,IAAI;gBAEF,IAAIC,OAAO;oBACT,OAAOD,KAAK,MAAMC;gBACpB;gBAOAD,KAAK,IAAII,4BAAa,CAAC,KAAK,mBAAmB;YACjD,EAAE,OAAO0B,OAAO;gBACd9B,KAAK,IAAII,4BAAa,CAAC,KAAK,0BAA0B;YACxD;QACF;IACF;IAlGA,aAAsB;QACpB,IAAI,CAACV,UAAU;IACjB;AAiGF;AAxGE,iBADWN,iBACIK,YAAmC"}