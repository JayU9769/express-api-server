{"version":3,"sources":["../../../src/config/redis.ts"],"sourcesContent":["import { createClient, RedisClientType } from 'redis';\nimport { REDIS_URL } from '@/config/index';\n\n/**\n * A singleton service class to handle interactions with a Redis server.\n * It manages the Redis connection and provides methods for setting, getting, and deleting values.\n */\nexport class RedisService {\n  private static instance: RedisService | null = null;\n  public client: RedisClientType;\n\n  /**\n   * Private constructor to prevent direct instantiation.\n   */\n  private constructor() {\n    this.client = createClient({\n      url: REDIS_URL, // Adjust the URL based on your Redis server configuration\n    });\n\n    this.client\n      .connect()\n      .then(() => {\n        console.log('Redis client connected');\n      })\n      .catch(err => {\n        console.error('Redis error:', err);\n      });\n  }\n\n  /**\n   * Gets the singleton instance of the RedisService class.\n   * @returns The singleton instance of RedisService.\n   */\n  public static getInstance(): RedisService {\n    if (!RedisService.instance) {\n      RedisService.instance = new RedisService();\n    }\n    return RedisService.instance;\n  }\n\n  /**\n   * Sets a value in Redis with the given key.\n   * @param key - The key under which the value will be stored.\n   * @param value - The value to be stored in Redis.\n   * @returns A promise that resolves when the value has been set.\n   */\n  async set(key: string, value: string): Promise<void> {\n    try {\n      await this.client.set(key, value);\n    } catch (err) {\n      console.error('Failed to set value in Redis:', err);\n    }\n  }\n\n  /**\n   * Retrieves a value from Redis by its key.\n   * @param key - The key of the value to retrieve.\n   * @returns A promise that resolves to the value associated with the key, or null if the key does not exist.\n   */\n  async get(key: string): Promise<string | null> {\n    try {\n      return await this.client.get(key);\n    } catch (err) {\n      console.error('Failed to get value from Redis:', err);\n      return null;\n    }\n  }\n\n  /**\n   * Deletes a value from Redis by its key.\n   * @param key - The key of the value to delete.\n   * @returns A promise that resolves when the value has been deleted.\n   */\n  async del(key: string): Promise<void> {\n    try {\n      await this.client.del(key);\n    } catch (err) {\n      console.error('Failed to delete value from Redis:', err);\n    }\n  }\n\n  /**\n   * Closes the Redis connection.\n   * @returns A promise that resolves when the Redis client has been closed.\n   */\n  async quit(): Promise<void> {\n    try {\n      await this.client.quit();\n    } catch (err) {\n      console.error('Failed to quit Redis client:', err);\n    }\n  }\n}\n"],"names":["RedisService","getInstance","instance","set","key","value","client","err","console","error","get","del","quit","createClient","url","REDIS_URL","connect","then","log","catch"],"mappings":";;;;+BAOaA;;;eAAAA;;;uBAPiC;uBACpB;;;;;;;;;;;;;;AAMnB,IAAA,AAAMA,eAAN,MAAMA;IA0BX,OAAcC,cAA4B;QACxC,IAAI,CAACD,aAAaE,QAAQ,EAAE;YAC1BF,aAAaE,QAAQ,GAAG,IAAIF;QAC9B;QACA,OAAOA,aAAaE,QAAQ;IAC9B;IAQA,MAAMC,IAAIC,GAAW,EAAEC,KAAa,EAAiB;QACnD,IAAI;YACF,MAAM,IAAI,CAACC,MAAM,CAACH,GAAG,CAACC,KAAKC;QAC7B,EAAE,OAAOE,KAAK;YACZC,QAAQC,KAAK,CAAC,iCAAiCF;QACjD;IACF;IAOA,MAAMG,IAAIN,GAAW,EAA0B;QAC7C,IAAI;YACF,OAAO,MAAM,IAAI,CAACE,MAAM,CAACI,GAAG,CAACN;QAC/B,EAAE,OAAOG,KAAK;YACZC,QAAQC,KAAK,CAAC,mCAAmCF;YACjD,OAAO;QACT;IACF;IAOA,MAAMI,IAAIP,GAAW,EAAiB;QACpC,IAAI;YACF,MAAM,IAAI,CAACE,MAAM,CAACK,GAAG,CAACP;QACxB,EAAE,OAAOG,KAAK;YACZC,QAAQC,KAAK,CAAC,sCAAsCF;QACtD;IACF;IAMA,MAAMK,OAAsB;QAC1B,IAAI;YACF,MAAM,IAAI,CAACN,MAAM,CAACM,IAAI;QACxB,EAAE,OAAOL,KAAK;YACZC,QAAQC,KAAK,CAAC,gCAAgCF;QAChD;IACF;IA7EA,aAAsB;QALtB,uBAAOD,UAAP,KAAA;QAME,IAAI,CAACA,MAAM,GAAGO,IAAAA,mBAAY,EAAC;YACzBC,KAAKC,gBAAS;QAChB;QAEA,IAAI,CAACT,MAAM,CACRU,OAAO,GACPC,IAAI,CAAC;YACJT,QAAQU,GAAG,CAAC;QACd,GACCC,KAAK,CAACZ,CAAAA;YACLC,QAAQC,KAAK,CAAC,gBAAgBF;QAChC;IACJ;AAiEF;AApFE,iBADWP,cACIE,YAAgC"}