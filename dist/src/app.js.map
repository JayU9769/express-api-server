{"version":3,"sources":["../../src/app.ts"],"sourcesContent":["import 'reflect-metadata';\nimport express from 'express';\nimport compression from 'compression';\nimport cookieParser from 'cookie-parser';\nimport cors from 'cors';\nimport hpp from 'hpp';\nimport path from 'path';\nimport { CREDENTIALS, NODE_ENV, ORIGIN, PORT } from '@/config';\nimport { Routes } from '@/interfaces/route.interface';\nimport { ErrorMiddleware } from '@/middlewares/error.middleware';\nimport { passport, PassportService } from '@/config/passport';\nimport { SessionService } from '@/config/session';\nimport { RedisService } from '@/config/redis';\n\n/**\n * @class App\n * @description Main class for setting up and running the Express application.\n */\nexport class App {\n  public app: express.Application;\n  public env: string;\n  public port: string | number;\n\n  /**\n   * @constructor\n   * @param {Routes[]} routes - Array of route objects to initialize.\n   * Initializes the Express application with routes, middleware, and error handling.\n   */\n  constructor(routes: Routes[]) {\n    this.app = express();\n    this.env = NODE_ENV || 'development'; // Environment (default to 'development')\n    this.port = PORT || 3000; // Application port (default to 3000)\n\n    this.initializeMiddlewares(); // Initialize application middlewares\n    this.initializeRoutes(routes); // Initialize application routes\n    this.initializeErrorHandling(); // Set up error handling middleware\n    this.initializeServices(); // Initialize services\n  }\n\n  /**\n   * @method listen\n   * @description Starts the Express application server on the specified port.\n   */\n  public async listen() {\n    this.app.listen(this.port, () => {\n      console.info(`=================================`);\n      console.info(`======= ENV: ${this.env} =======`);\n      console.info(`ðŸš€ App listening on the port ${this.port}`);\n      console.info(`=================================`);\n    });\n  }\n\n  /**\n   * @method initializeMiddlewares\n   * @description Sets up all middlewares required for the application.\n   * This includes CORS, session handling, Passport initialization, and more.\n   */\n  private initializeMiddlewares() {\n    // Enable CORS with specified origin and credentials\n    this.app.use(cors({ origin: ORIGIN, credentials: CREDENTIALS }));\n\n    // Parse incoming JSON requests\n    this.app.use(express.json());\n\n    // Parse cookies from the request headers\n    this.app.use(cookieParser());\n\n    // Initialize sessions before Passport\n    this.app.use(new SessionService().initialize());\n\n    // Initialize Passport for authentication and session management\n    this.app.use(passport.initialize()); // Initialize passport\n    this.app.use(passport.session()); // Attach the session handling for passport\n\n    // Protection against HTTP parameter pollution attacks\n    this.app.use(hpp());\n\n    // Enable response compression to reduce payload sizes\n    this.app.use(compression());\n\n    // Serve static files from the 'public' directory\n    this.app.use(express.static(path.join(__dirname, '..', 'public')));\n\n    // Parse URL-encoded form data\n    this.app.use(express.urlencoded({ extended: true }));\n  }\n\n  /**\n   * @method initializeRoutes\n   * @param {Routes[]} routes - Array of route objects to initialize.\n   * @description Loops through all route objects and adds them to the Express application.\n   */\n  private initializeRoutes(routes: Routes[]) {\n    routes.forEach(route => {\n      // Attach each route's router to the base path '/'\n      this.app.use('/', route.router);\n    });\n  }\n\n  /**\n   * @method initializeErrorHandling\n   * @description Initializes the error handling middleware for catching and processing errors.\n   */\n  private initializeErrorHandling() {\n    // Use the custom error middleware to handle all application errors\n    this.app.use(ErrorMiddleware);\n  }\n\n  /**\n   * Initializes third-party services required by the application.\n   * This method ensures that all necessary services are set up and ready to use.\n   * Specifically, it initializes Redis for caching and session management\n   * and configures Passport for authentication strategies.\n   *\n   * @method initializeServices\n   * @description Initializes the Redis and Passport services.\n   * - `RedisService.getInstance()`: Initializes the Redis service singleton instance.\n   * - `PassportService.getInstance()`: Initializes the Passport service singleton instance.\n   */\n  private initializeServices() {\n    // Initialize the Redis service. The RedisService is a singleton, so this\n    // ensures that only one instance is created and used throughout the application.\n    RedisService.getInstance(); // Initializes Redis service\n\n    // Initialize the Passport service. The PassportService is also a singleton,\n    // ensuring that all Passport strategies and configurations are set up properly.\n    PassportService.getInstance(); // Initializes Passport strategies\n  }\n}\n"],"names":["App","listen","app","port","console","info","env","initializeMiddlewares","use","cors","origin","ORIGIN","credentials","CREDENTIALS","express","json","cookieParser","SessionService","initialize","passport","session","hpp","compression","static","path","join","__dirname","urlencoded","extended","initializeRoutes","routes","forEach","route","router","initializeErrorHandling","ErrorMiddleware","initializeServices","RedisService","getInstance","PassportService","constructor","NODE_ENV","PORT"],"mappings":";;;;+BAkBaA;;;eAAAA;;;QAlBN;gEACa;oEACI;qEACC;6DACR;4DACD;6DACC;wBACmC;iCAEpB;0BACU;yBACX;uBACF;;;;;;;;;;;;;;;;;;;AAMtB,IAAA,AAAMA,MAAN,MAAMA;IAyBX,MAAaC,SAAS;QACpB,IAAI,CAACC,GAAG,CAACD,MAAM,CAAC,IAAI,CAACE,IAAI,EAAE;YACzBC,QAAQC,IAAI,CAAC,CAAC,iCAAiC,CAAC;YAChDD,QAAQC,IAAI,CAAC,CAAC,aAAa,EAAE,IAAI,CAACC,GAAG,CAAC,QAAQ,CAAC;YAC/CF,QAAQC,IAAI,CAAC,CAAC,6BAA6B,EAAE,IAAI,CAACF,IAAI,CAAC,CAAC;YACxDC,QAAQC,IAAI,CAAC,CAAC,iCAAiC,CAAC;QAClD;IACF;IAOQE,wBAAwB;QAE9B,IAAI,CAACL,GAAG,CAACM,GAAG,CAACC,IAAAA,aAAI,EAAC;YAAEC,QAAQC,cAAM;YAAEC,aAAaC,mBAAW;QAAC;QAG7D,IAAI,CAACX,GAAG,CAACM,GAAG,CAACM,gBAAO,CAACC,IAAI;QAGzB,IAAI,CAACb,GAAG,CAACM,GAAG,CAACQ,IAAAA,qBAAY;QAGzB,IAAI,CAACd,GAAG,CAACM,GAAG,CAAC,IAAIS,uBAAc,GAAGC,UAAU;QAG5C,IAAI,CAAChB,GAAG,CAACM,GAAG,CAACW,kBAAQ,CAACD,UAAU;QAChC,IAAI,CAAChB,GAAG,CAACM,GAAG,CAACW,kBAAQ,CAACC,OAAO;QAG7B,IAAI,CAAClB,GAAG,CAACM,GAAG,CAACa,IAAAA,YAAG;QAGhB,IAAI,CAACnB,GAAG,CAACM,GAAG,CAACc,IAAAA,oBAAW;QAGxB,IAAI,CAACpB,GAAG,CAACM,GAAG,CAACM,gBAAO,CAACS,MAAM,CAACC,aAAI,CAACC,IAAI,CAACC,WAAW,MAAM;QAGvD,IAAI,CAACxB,GAAG,CAACM,GAAG,CAACM,gBAAO,CAACa,UAAU,CAAC;YAAEC,UAAU;QAAK;IACnD;IAOQC,iBAAiBC,MAAgB,EAAE;QACzCA,OAAOC,OAAO,CAACC,CAAAA;YAEb,IAAI,CAAC9B,GAAG,CAACM,GAAG,CAAC,KAAKwB,MAAMC,MAAM;QAChC;IACF;IAMQC,0BAA0B;QAEhC,IAAI,CAAChC,GAAG,CAACM,GAAG,CAAC2B,gCAAe;IAC9B;IAaQC,qBAAqB;QAG3BC,mBAAY,CAACC,WAAW;QAIxBC,yBAAe,CAACD,WAAW;IAC7B;IAnGAE,YAAYV,MAAgB,CAAE;QAT9B,uBAAO5B,OAAP,KAAA;QACA,uBAAOI,OAAP,KAAA;QACA,uBAAOH,QAAP,KAAA;QAQE,IAAI,CAACD,GAAG,GAAGY,IAAAA,gBAAO;QAClB,IAAI,CAACR,GAAG,GAAGmC,gBAAQ,IAAI;QACvB,IAAI,CAACtC,IAAI,GAAGuC,YAAI,IAAI;QAEpB,IAAI,CAACnC,qBAAqB;QAC1B,IAAI,CAACsB,gBAAgB,CAACC;QACtB,IAAI,CAACI,uBAAuB;QAC5B,IAAI,CAACE,kBAAkB;IACzB;AA2FF"}